%######################################
%
% 2015.5.30 CX on desk
% 作用：这个函数用于建立整数规划模型，并使用求解器求解
% 数据存储：将求解后的流程变量值保存为 Track_Data
% 依赖关系：调用 CX_ILP_Pair_Pre 进行预处理
%
%######################################
%
% 2015.6.27 最新改动 
% 由于SSVM已经完成，因此以后这个脚本（利用预先分配的概率求解ILP）将不再使用！
% 但 CX_ILP_Pair_Pre 这个函数用于计算分裂等行为的最近4邻域，因此改编后仍继续使用
%
%######################################


clear;close all;

% 判断是否调用 CX_ILP_Pair_Pre 进行数据预处理，计算概率矩阵
frame = 50;
raw_ellipse_addr = 'E:\datasets\first editon\training datasets\N2DL-HeLa\01_2-16_seg\FOI拟合图2.0\raw_ellipse2.0.mat';
Pre_data_addr = 'E:\datasets\first editon\training datasets\N2DL-HeLa\01_2-16_track\Pair\Pre_data.mat';
if ~exist('E:\datasets\first editon\training datasets\N2DL-HeLa\01_2-16_track\Pair\Pre_data.mat', 'file')
    CX_ILP_Pair_Pre( raw_ellipse_addr, frame );
end
load( Pre_data_addr );
%####################### 判断结束 #######################

disp('   构建目标函数……');
tic;
%% 构建变量矩阵
fij = cell(frame-1,1);
fid = cell(frame-1,1);
fit = cell(frame-1,1);
fiv = cell(frame-1,1);
fsj = cell(frame,1);
fmj = cell(frame,1);
for t=1:frame-1
    %  t中第m个前景中的第width个细胞   
    fij{t} = binvar(n(t), n(t+1), 'full'); %%fij变量矩阵
    fid{t} = binvar(n(t), 6, 'full');   %%母细胞
    fit{t} = binvar(n(t), 1, 'full');   %%消失
    fiv{t} = binvar(n(t), 6, 'full');   %%分裂
end
for t=2:frame
    fsj{t} = binvar(n(t), 1, 'full');   %%出现
    fmj{t} = binvar(n(t), 6,  'full');   %%融合 ##注意这个矩阵代表（t * t-1），其他都是（t * t+1）
end

%% 目标函数
tmp_ij = 0;
tmp_it = 0;
tmp_id = 0;
tmp_iv = 0;
for t=1:frame-1
    tmp_ij = sum(sum( log( Pij{t}./(1-Pij{t}) ).*fij{t} )) + tmp_ij;
    tmp_it = sum( log( Pit{t}./(1-Pit{t}) ).*fit{t} ) + tmp_it;  % 只有it和sj是列向量了，其余都是矩阵
    tmp_id = sum(sum( log( Pid{t}./(1-Pid{t}) ).*fid{t} )) + tmp_id;   
    tmp_iv = sum(sum( log( Piv{t}./(1-Piv{t}) ).*fiv{t} )) + tmp_iv;
end

tmp_sj = 0;
tmp_mj = 0;
for t=2:frame   
    tmp_sj = sum( log( Psj{t}./(1-Psj{t}) ).*fsj{t} ) + tmp_sj;
    tmp_mj = sum(sum( log( Pmj{t}./(1-Pmj{t}) ).*fmj{t} )) + tmp_mj;
end
    
object_function = tmp_ij + tmp_it + tmp_id*2 + tmp_iv + tmp_sj + tmp_mj;
clear tmp_ij tmp_it tmp_id tmp_iv tmp_sj tmp_mj;

disp('   构建约束条件……');
%######################################## 建立约束条件 #############################################

%% 约束条件1： 进出守恒
F1 = [];
F2 = [];

%#############  中间帧的入口出口守恒  ###########
for t=2:frame-1
    for j=1:n(t)
        sum_fid = 0;
        sum_fiv = 0;
        sum_fmj = 0;
        % sum_fid 为所有分裂到包含 j 的 pair 的 fid 之和
        for ind=1:numel(conflict_pair_next_xy{t}{j})/2
            sum_fid = sum_fid + fid{t-1}( conflict_pair_next_xy{t}{j}(ind,1), conflict_pair_next_xy{t}{j}(ind,2) );
            sum_fiv = sum_fiv + fiv{t-1}( conflict_pair_next_xy{t}{j}(ind,1), conflict_pair_next_xy{t}{j}(ind,2) );
        end
        % sum_fmj 为所有包含 j 的融合 pair 的 fmj 之和
        for ind=1:numel(conflict_pair_last_xy{t}{j})/2
            sum_fmj = sum_fmj + fmj{t+1}( conflict_pair_last_xy{t}{j}(ind,1), conflict_pair_last_xy{t}{j}(ind,2) );
        end
        F1 = [ F1, sum(fij{t-1}(:,j)) + fsj{t}(j) + sum(fmj{t}(j,:)) + sum_fid + sum_fiv == sum(fij{t}(j,:)) + fit{t}(j) + sum(fid{t}(j,:)) + sum(fiv{t}(j,:)) + sum_fmj ];
    end
end

%#############  2到最后帧入口唯一  ###########
for t=2:frame;
    for j=1:n(t)
        sum_fid = 0;
        sum_fiv = 0;
        % sum_fid 为所有分裂到包含 j 的 pair 的 fid 之和
        for ind=1:numel(conflict_pair_next_xy{t}{j})/2
            sum_fid = sum_fid + fid{t-1}( conflict_pair_next_xy{t}{j}(ind,1), conflict_pair_next_xy{t}{j}(ind,2) );
            sum_fiv = sum_fiv + fiv{t-1}( conflict_pair_next_xy{t}{j}(ind,1), conflict_pair_next_xy{t}{j}(ind,2) );
        end
        % 入口最多有一条   迁移来           新出现      merge融合体      子细胞
        F2 = [ F2, sum(fij{t-1}(:,j)) + fsj{t}(j) + sum(fmj{t}(j,:)) + sum_fid + sum_fiv <= 1 ];
    end
end

%#############  第一帧出口唯一  ###########
t=1;
for j=1:n(t)
    sum_fmj = 0;
    % sum_fmj 为所有包含 j 的融合 pair 的 fmj 之和
    for ind=1:numel(conflict_pair_last_xy{t}{j})/2
        sum_fmj = sum_fmj + fmj{t+1}( conflict_pair_last_xy{t}{j}(ind,1), conflict_pair_last_xy{t}{j}(ind,2) );
    end
    % 出口最多有一条   迁移出去        消失        母细胞        下一帧split        下一帧融合
    F2 = [ F2, sum(fij{t}(j,:)) + fit{t}(j) + sum(fid{t}(j,:)) + sum(fiv{t}(j,:)) + sum_fmj <= 1 ];
end
    
%#####################################

%% 约束条件2： 可选约束（部分可选约束可以通过强迫其概率值为0实现）
Fop1 = [];
Fop2 = [];
Fop3 = [];
Fop4 = [];
Fop5 = [];
%################## 可选择的约束一 #################（可以转换为概率约束）
% 分裂出去的不能仍在同一个前景中
for t=1:frame-1
    for j=1:n(t)
        tmp_conflict = 0;
        for mm=1:6
            sons = candidate_k_next{t}{j,mm};
            if Ellipse{t+1}{sons(1)}.ind_region == Ellipse{t+1}{sons(2)}.ind_region % 分裂出去的不能仍在同一个前景中
                tmp_conflict = tmp_conflict + fid{t}(j,mm);
            end
        end
        % 如果邻域内都是单独前景，tmp_conflict可能为double 0，因此要判断
        if ~isa(tmp_conflict, 'double')
            Fop1 = [ Fop1, tmp_conflict <= 0];
        end
    end
end

%################## 可选择的约束二 #################（可以转换为概率约束）
% 不允许不是同一个前景的细胞发生融合 在pair形式下实现这个很容易，只需要比较融合pair中的2细胞是否在一个前景内就可以了
for t=2:frame
    for j=1:n(t)
        tmp_conflict = 0;
        for mm=1:6
            sources = candidate_k_last{t}{j,mm};
            if Ellipse{t-1}{sources(1)}.ind_region ~= Ellipse{t-1}{sources(2)}.ind_region 
                tmp_conflict = tmp_conflict + fmj{t}(j,mm);
            end
        end
        % 如果邻域内都是单独前景，tmp_conflict可能为0，因此要判断
        if ~isa(tmp_conflict, 'double')
            Fop2 = [ Fop2, tmp_conflict <= 0];
        end
    end
end

%################## 可选择的约束三 #################
% 融合之后不允许立刻分裂
for t=2:frame-1
    for j=1:n(t)
        Fop3 = [ Fop3, sum(fmj{t}(j,:)) + sum(fid{t}(j,:)) <= 1 ];
    end
end

%################## 可选择的约束四 #################
% 2-t 帧要求每个前景内至少有一个被解释（入口解释）
for t=2:frame
    for j=1:n(t)
        sum_fid = 0;
        sum_fiv = 0;
        % 单独前景必须被解释，即入口和为1
        if Ellipse{t}{j}.num_hypoth == 1
            % sum_fid 为所有分裂到包含 j 的 pair 的 fid 之和
            for ind=1:numel(conflict_pair_next_xy{t}{j})/2
                sum_fid = sum_fid + fid{t-1}( conflict_pair_next_xy{t}{j}(ind,1), conflict_pair_next_xy{t}{j}(ind,2) );
                sum_fiv = sum_fiv + fiv{t-1}( conflict_pair_next_xy{t}{j}(ind,1), conflict_pair_next_xy{t}{j}(ind,2) );
            end
            Fop4 = [ Fop4, sum(fij{t-1}(:,j)) + fsj{t}(j) + sum(fmj{t}(j,:)) + sum_fid + sum_fiv >= 1 ];
        else
            % 多目标前景中至少有一个要被解释
            %
            % 这部分写在j到j+jplus为一个前景处 
        end
    end
end
 
t=1; % 同时需要添加第一帧的出口必须被解释
for j=1:n(t)
    if Ellipse{t}{j}.num_hypoth == 1
        sum_fmj = 0;
        % sum_fmj 为所有包含 j 的融合 pair 的 fmj 之和
        for ind=1:numel(conflict_pair_last_xy{t}{j})/2
            sum_fmj = sum_fmj + fmj{t+1}( conflict_pair_last_xy{t}{j}(ind,1), conflict_pair_last_xy{t}{j}(ind,2) );
        end
        Fop4 = [ Fop4, sum(fij{t}(j,:)) + fit{t}(j) + sum(fid{t}(j,:)) + sum(fiv{t}(j,:)) + sum_fmj >= 1 ];
    else
        % 多目标前景中至少有一个要被解释
        %
        % 这部分写在j到j+jplus为一个前景处
    end
end

%################## 可选择的约束五 #################（可以转换为概率约束）
% 要求分离split出去的2个子细胞必须在同一前景内
for t=1:frame-1
    for j=1:n(t)
        tmp_conflict = 0;
        for mm=1:6
            sons = candidate_k_next{t}{j,mm};
            if Ellipse{t+1}{sons(1)}.ind_region ~= Ellipse{t+1}{sons(2)}.ind_region % 分裂出去的必须是单独前景
                tmp_conflict = tmp_conflict + fiv{t}(j,mm);
            end
        end
        % 如果邻域内都是单独前景，tmp_conflict可能为double 0，因此要判断
        if ~isa(tmp_conflict, 'double')
            Fop5 = [ Fop5, tmp_conflict <= 0];
        end
    end
end
%#################################################

%% 约束条件3： 矛盾假说集合排除 
F3 = [];
F4 = [];
Fop6 = [];
Fop7 = [];

conflict = cell(frame, 1);
for t=1:frame
    conflict{t}={};
    j=1;
    while j<=n(t)    %j遍历
        if Ellipse{t}{j}.num_hypoth>1
            num_danduan = numel(Ellipse{t}{j}.flag_combine);
            % 这一部分求出j到j+jplus都属于同一前景
            jplus = 1;
            while Ellipse{t}{j+jplus}.ind_region == Ellipse{t}{j}.ind_region
                jplus = jplus + 1;
            end
            jplus = jplus - 1;
            %##################### j到j+jplus为一个前景 ####################
            
            % 此处添加一个多目标前景至少要有一个入口的条件
            %##########################################
            % 第一帧的多目标前景出口至少为1
            if t==1
                sum_fmj = 0;
                sum_fij = 0;
                sum_fit = 0;
                sum_fid = 0;
                sum_fiv = 0;
                for j_muti=j:j+jplus
                    % 求出前景内所有细胞merge出口的和
                    for ind=1:numel(conflict_pair_last_xy{t}{j_muti})/2
                        sum_fmj = sum_fmj + fmj{t+1}( conflict_pair_last_xy{t}{j_muti}(ind,1), conflict_pair_last_xy{t}{j_muti}(ind,2) );
                    end
                    % 求出前景内所有细胞其他 4 种出口的和
                    sum_fij = sum_fij + sum(fij{t}(j_muti,:));
                    sum_fit = sum_fit + fit{t}(j_muti);
                    sum_fid = sum_fid + sum(fid{t}(j_muti,:));
                    sum_fiv = sum_fiv + sum(fiv{t}(j_muti,:));
                end
                Fop6 = [ Fop6, sum_fmj + sum_fij + sum_fit + sum_fid + sum_fiv >= 1 ];
                
            else
            % 2-t帧的多目标前景入口至少为1
                sum_fmj = 0;
                sum_fij = 0;
                sum_fsj = 0;
                sum_fid = 0;
                sum_fiv = 0;
                for j_muti=j:j+jplus
                    % 求出前景内所有细胞 split 和 divide 入口的和
                    for ind=1:numel(conflict_pair_next_xy{t}{j_muti})/2
                        sum_fid = sum_fid + fid{t-1}( conflict_pair_next_xy{t}{j_muti}(ind,1), conflict_pair_next_xy{t}{j_muti}(ind,2) );
                        sum_fiv = sum_fiv + fiv{t-1}( conflict_pair_next_xy{t}{j_muti}(ind,1), conflict_pair_next_xy{t}{j_muti}(ind,2) );
                    end
                    % 求出前景内所有细胞其他 3 种入口的和
                    sum_fij = sum_fij + sum(fij{t-1}(:,j_muti));
                    sum_fmj = sum_fmj + sum(fmj{t}(j_muti,:));
                    sum_fsj = sum_fsj + fsj{t}(j_muti);
                end
                Fop7 = [ Fop7, sum_fmj + sum_fij + sum_fsj + sum_fid + sum_fiv >= 1 ];
            end
            %##########################################   
            %
            % 以上一段是在一个多目标前景内设置入口至少为1的约束
            % 即保证每个前景都必须被解释，不允许虚景的存在
            %
            %##############################################################
            
            % conflict表示所有可能的矛盾集合
            for uu=j:j+num_danduan-1
                %########这部分找出了一个矛盾假说集合
                conflict{t}{j, uu-j+1} = uu;
                for vv=uu+1:j+jplus
                    if ~isequal( Ellipse{t}{uu}.flag_combine & Ellipse{t}{vv}.flag_combine, zeros(1,num_danduan))   %%相与不为0则将其加入矛盾集
                        conflict{t}{j, uu-j+1} = [conflict{t}{j, uu-j+1}, vv];
                    end
                end
                %##########################此处计算出入口约束###############
                conflict_tmp_set = conflict{t}{j, uu-j+1}; %矛盾集合的临时变量
                if t==1 %第一帧考虑出口
                    constrain_sum1 = 0;
                    constrain_sum2 = 0;
                    constrain_sum3 = 0;
                    sum_fmj = 0;
                    tmp_xy = 0;
                    %### 第一帧一个矛盾集内出口至多为1个
                    for jj=1:numel(conflict_tmp_set) % conflict_tmp_set为[21, 23]的形式
                        ind_j = conflict_tmp_set(jj); % 取到矛盾集中第一个细胞的编号
                        constrain_sum1 = constrain_sum1 + sum( fij{t}(ind_j,:) ); %%迁移出口和
                        constrain_sum2 = constrain_sum2 + sum( fit{t}(ind_j) );   %%消失出口和
                        constrain_sum3 = constrain_sum3 + sum( fid{t}(ind_j,:) ) + sum( fiv{t}(ind_j,:) );%%分离/分裂出口和
                        % sum_fmj 为融合出口和
                        tmp_xy = conflict_pair_last_xy{t}{ind_j}; % 取到包含当前细胞 ind_j 的pair坐标矩阵
                        for ind=1:numel(tmp_xy)/2
                            sum_fmj = sum_fmj + fmj{t+1}( tmp_xy(ind,1), tmp_xy(ind,2) );
                        end
                    end
                    F3 = [ constrain_sum1 + constrain_sum2 + constrain_sum3 + sum_fmj <= 1 ];   %%出口唯一
                    clear constrain_sum1 constrain_sum2 constrain_sum3 sum_fmj;
                else % 2―t帧考虑入口
                    constrain_sum4 = 0;
                    sum_fid = 0;
                    sum_fiv = 0;
                    tmp_xy = 0;
                    
                    %### 一个矛盾集内入口至多为1个
                    for jj=1:numel(conflict_tmp_set)
                        ind_j = conflict_tmp_set(jj); % 取到矛盾集中第一个细胞的编号
                        constrain_sum4 = constrain_sum4 + sum( fij{t-1}(:,ind_j) ) + fsj{t}(ind_j) + fmj{t}(ind_j,:); % 迁移、出现、融合
                        % sum_fid 为所有分裂出口和
                        tmp_xy = conflict_pair_next_xy{t}{ind_j}; % 取到包含当前细胞 ind_j 的pair坐标矩阵
                        for ind=1:numel(tmp_xy)/2
                            sum_fid = sum_fid + fid{t-1}( tmp_xy(ind,1), tmp_xy(ind,2) );
                            sum_fiv = sum_fiv + fiv{t-1}( tmp_xy(ind,1), tmp_xy(ind,2) );
                        end
                    end    
                    F4 = [ F4, constrain_sum4 + sum_fid + sum_fiv <= 1 ]; %%2―n帧的入口和唯一
                    %###
                end
                %##########################################################
            end
            j = j+jplus+1;
        else %## 指前景中只含有一个椭圆
            j = j+1;
        end
    end  %## end while
end

toc;
disp('   开始求解ILP……');

%% 导出最终的目标函数与总约束

%#################################
% 各个约束条件的解释如下：
%######### 必要约束 4 个 ##########

% F1：2―t-1 帧中 每个椭圆的 input = output
% F2：2―t   帧中 每个椭圆的 input<=1 && 第 1 帧的 output <=1
% F3：1      帧中 每个矛盾集内 output<=1
% F4：2―t   帧中 每个矛盾集内 inputput<=1 && 第 1 帧的矛盾集内 output <=1

%######### 可选约束 6 个 ##########

% Fop1：2―t   帧中 分裂得到的子细胞不能在同一个前景中（可用概率约束代替）
% Fop2：1―t-1 帧中 不是同一个前景的细胞不能发生融合（可用概率约束代替）
% Fop3：2―t-1 帧中 融合得来的大细胞不允许立刻分裂
% Fop4：1―t   帧中 单假说前景必须被解释（包括 2―t 帧的入口解释和第 1 帧的出口解释）
% Fop5：2―t-1 帧中 分离得来的2个细胞必须在同一个前景内（可用概率约束代替）
% Fop6：1      帧中 多假说前景 出口至少为1
% Fop7：2―t   帧中 多假说前景 入口至少为1

%##################################
%##########################################################################
% sdpsettings:      求解器选项设置如下
% http://users.isy.liu.se/johanl/yalmip/pmwiki.php?n=Commands.Sdpsettings

% verbose           打印信息量
% solver            指定求解器
% saveduals         设置为0，不保存对偶变量以节省内存
% usex0             配合 assign 命令给求解器设置初始值，以加快求解速度
% assign            http://users.isy.liu.se/johanl/yalmip/pmwiki.php?n=Commands.Assign
% savesdpafile      保存约束条件和目标函数 http://users.isy.liu.se/johanl/yalmip/pmwiki.php?n=Commands.Savesdpafile
% loadsedumidata    载入约束条件和目标函数 http://users.isy.liu.se/johanl/yalmip/pmwiki.php?n=Commands.Loadsedumidata
      
%##########################################################################

Foptional = [ Fop3, Fop6, Fop7 Fop1 Fop2 Fop5 ]; % Fop1 Fop2 Fop5 用概率为0约束掉了，此处可以不写（2015.6.15）
clear Fop1 Fop2 Fop3 Fop4 Fop5 Fop6 Fop7;
F = [ F1, F2, F3, F4, Foptional ];
clear F1 F2 F3 F4 Foptional;
% 保存目标函数与约束条件，清空缓存
clearvars -except frame Ellipse F object_function fij fid fiv fit fsj fmj; 

%% 最终求解

options = sdpsettings('verbose',0,'solver','cplex','saveduals',0);
sol = solvesdp(F, -object_function, options)

Fij = cell(frame-1,1);
Fid = cell(frame-1,1);
Fiv = cell(frame-1,1);
Fit = cell(frame-1,1);
Fsj = cell(frame,1);
Fmj = cell(frame,1);
if sol.problem == 0
    for t=1:frame-1
        Fij{t} = round(value(fij{t})) ;
        Fid{t} = round(value(fid{t})) ;
        Fiv{t} = round(value(fiv{t})) ;
        Fit{t} = round(value(fit{t})) ;
    end
    for j=2:frame
        Fsj{j} = round(value(fsj{j})) ;
        Fmj{j} = round(value(fmj{j})) ;
    end

    COST = value(object_function)
else
    sol.info
    yalmiperror(sol.problem)
end

save('E:\datasets\first editon\training datasets\N2DL-HeLa\01_2-16_track\Pair\Track_Data.mat','Fij','Fid','Fiv','Fit','Fsj','Fmj');









