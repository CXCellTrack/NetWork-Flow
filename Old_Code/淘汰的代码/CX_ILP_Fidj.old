clear;close all;
num_appear = 34;
num_death = 79;
num_divide = 94;
num_move = 8374;
P_appear = 0.1;
P_death = 0.1;
P_divide = 0.5;
P_move = 0.9;
% %% 读入图片――产生假说
% t00=imread('E:\datasets\first editon\training datasets\N2DL-HeLa\01_2-16_seg\t00.png');
% t01=imread('E:\datasets\first editon\training datasets\N2DL-HeLa\01_2-16_seg\t01.png');
% t02=imread('E:\datasets\first editon\training datasets\N2DL-HeLa\01_2-16_seg\t02.png');
% t03=imread('E:\datasets\first editon\training datasets\N2DL-HeLa\01_2-16_seg\t03.png');
% t04=imread('E:\datasets\first editon\training datasets\N2DL-HeLa\01_2-16_seg\t04.png');
% 
% cut_1 = [313,86]; cut_2 = [569,239];
% t0 = imcrop(t00,[cut_1,cut_2(1)-cut_1(1),cut_2(2)-cut_1(2)]);
% t1 = imcrop(t01,[cut_1,cut_2(1)-cut_1(1),cut_2(2)-cut_1(2)]);
% t2 = imcrop(t02,[cut_1,cut_2(1)-cut_1(1),cut_2(2)-cut_1(2)]);
% t3 = imcrop(t03,[cut_1,cut_2(1)-cut_1(1),cut_2(2)-cut_1(2)]);
% t4 = imcrop(t04,[cut_1,cut_2(1)-cut_1(1),cut_2(2)-cut_1(2)]);
% 
% [ Ellipse{1} ]= CX_fit( t00, 0);
% [ Ellipse{2} ]= CX_fit( t01, 0);
% [ Ellipse{3} ]= CX_fit( t02, 0);
% [ Ellipse{4} ]= CX_fit( t03, 0);
% [ Ellipse{5} ]= CX_fit( t04, 0);
% 
% save('Ellipse','Ellipse');
%% 计算基本信息
tic;
disp('   构建目标函数和约束条件……');

load('E:\datasets\first editon\training datasets\N2DL-HeLa\01_2-16_seg\raw_ellipse1.7.mat');
Ellipse = ellipse(1:15);
clear ellipse;
frame = numel(Ellipse);
% n=zeros(1,frame);
% width=cell(1,frame);
% max_wid=zeros(1,frame);
% m=zeros(1,frame);   %%一张图中的前景数目
% for t=1:frame
%     [m(t), max_wid(t)]=size(Ellipse{t}); 
%     width{t}= max_wid(t)*ones(m(t), 1);
%     for n_r=1:m(t)
%         while isempty(Ellipse{t}{n_r,width{t}(n_r)}) || Ellipse{t}{n_r,width{t}(n_r)}.status==0 %%滤掉空cell和status为0的
%                 width{t}(n_r)=width{t}(n_r)-1;%%计算每行的cell数目，即前景的拟合数目
%         end
%     end
%     n(t)=sum(width{t}(:));    %%每一帧中的椭圆个数
% end
n=ones(1,frame);
for t=1:frame
    Ellipse{t} = reshape(Ellipse{t}',size(Ellipse{t},1)*size(Ellipse{t},2),1); %拉直
    while(n(t)<=numel(Ellipse{t}))
        while isempty(Ellipse{t}{n(t)}) || Ellipse{t}{n(t)}.status==0   %%滤掉空cell和status为0的
            Ellipse{t}(n(t))=[];
            if n(t)> numel(Ellipse{t})
                n(t)=n(t)-1;
                break;
            end
        end
        n(t)=n(t)+1;
    end
    n(t)=n(t)-1;
end

for t=1:frame-1
    %                     这2个作为弧变量           
    % 对应      it        ij         idj        sj  
    num_var(t)=n(t)+ n(t)*n(t+1)+ n(t)*n(t+1)+ n(t+1) ;    %%2帧之间的变量数
end
sum_var = sum(num_var);   %%总变量数目

%% 构建变量矩阵
fij={};
fidj={};
fit={};
fsj={};
for t=1:frame-1
    %  t中第m个前景中的第width个细胞   
    fij{t} = binvar(n(t), n(t+1), 'full'); %%fij变量矩阵
    fidj{t} = binvar(n(t), n(t+1), 'full');   %%i为母细胞，j为子细胞
    fit{t} = binvar(n(t), 1, 'full');   %%消失
end
for t1=2:frame
    fsj{t1} = binvar(n(t1), 1,'full');   %%出现
end

%% 求解Pij迁移概率矩阵 Pidj分裂概率矩阵
Pij = cell(1,frame-1);
dist = cell(1,frame-1);

for t=1:frame-1
    Pij{t} = zeros(n(t),n(t+1));
    dist{t} = zeros(n(t),n(t+1));
    for j=1:n(t)
        for k=1:n(t+1)
            % 椭圆距离必须在一定范围内
            udist = sqrt( (Ellipse{t}{j}.x0 - Ellipse{t+1}{k}.x0)^2 + (Ellipse{t}{j}.y0 - Ellipse{t+1}{k}.y0)^2 );
            if udist<=5*(Ellipse{t}{j}.a)
                % 距离尺度，判断2个椭圆中心相距的远近,在取倒数,开根号弱化距离大小影响
                dist{t}(j,k) = 1/udist;
            else
                dist{t}(j,k) = 0;    %距离太远则将Pij设为1个小常数
            end
        end
        tmpmax = max(dist{t}(j,:));
        for k=1:n(t+1)
%             fij{i}(k,m) = P_move*( tmpmin / dist{i}(k,m) );
            if tmpmax==0
                Pij{t}(j,:)=0;
            else
                if tmpmax<1/(2*Ellipse{t}{j}.a)  % 即 最短距离大于2a
                    Pij{t}(j,k) = P_move * Ellipse{t}{j}.a*dist{t}(j,k); %距离大快速下降
                else    
                    Pij{t}(j,k) = P_move * ( sqrt(dist{t}(j,k)/tmpmax) );    %%距离小缓慢下降
                end
            end
        end
    end
end

%% 求解Pid分裂概率矩阵  （先留出位置）
Pidj = Pij;



%% 目标函数
tmp_ij = 0;
tmp_it = 0;
tmp_idj = 0;
for t=1:frame-1
    tmp_ij = sum(sum( log(Pij{t}./(1-Pij{t})).*fij{t} )) + tmp_ij;
    tmp_it = log(P_death/(1-P_death))*sum(sum(fit{t})) + tmp_it;
    tmp_idj = sum(sum( log(Pidj{t}./(1-Pidj{t})).*fidj{t} )) + tmp_idj;
end

tmp_sj = 0;
for j=2:frame   %%fdj 不进入目标函数的计算
    tmp_sj = log(P_appear/(1-P_appear))*sum(sum(fsj{j})) + tmp_sj;
end
    
object_function = tmp_ij + tmp_it + tmp_idj + tmp_sj;

%######################################## 建立约束条件 #############################################
%% 约束条件1： 进出守恒
F1 = [];
F2 = [];
for t=2:frame-1  %%中间帧
    for j=1:n(t)   %%对于任意的j
        %分别对应      fij(i遍历)                                           fjk(k遍历)
        F1 = [ F1, sum(fij{t-1}(:,j)) + fsj{t}(j) + sum(fidj{t-1}(:,j)) == sum(fij{t}(j,:)) + fit{t}(j) + sum(fidj{t}(j,:))/2 ];
        % 3个入口只能选择一个   fij(i遍历)   出现     子细胞
        F2 = [ F2, sum(fij{t-1}(:,j)) + fsj{t}(j) + sum(fidj{t-1}(:,j)) <=1 ];
    end
end
t = frame; 
j = n(t);
% 3个入口只能选择一个   fij(i遍历)   出现     子细胞
F2 = [ F2, sum(fij{t-1}(:,j)) + fsj{t}(j) + sum(fidj{t-1}(:,j)) <=1 ]; %补充上最后一帧的入口约束

%% 约束条件2： 分裂守恒
F3 = [];
F4 = [];

Fmod = [];
for t=1:frame-1
    if t==1
        for j=1:n(t)
            %  出口约束只设置第一帧，其余由进出守恒约束
            F3 = [ F3, sum(fij{t}(j,:)) + fit{t}(j) + sum(fidj{t}(j,:))/2 <= 1, sum(fidj{t}(j,:))==0 ];   
        end
    else
        for j=1:n(t)
            uu=[];
            for k=1:n(t+1)
                if dist{t}(j,k)==0  %%如果分裂概率为0，则将此处的fidj强制为0
                    uu = [ uu, k];
                end
            end
            Fmod = [ Fmod, sum(fidj{t}(j,uu))==0, sum(fij{t}(j,uu))==0];
        end
    end
end


%% 约束条件3： 排除矛盾假说
F5 = [];  %%存在重叠的细胞不可能由分裂得到
F6 = [];  %%第一帧的出口矛盾约束
F7 = [];  %%2―n帧的入口矛盾约束
conflict = {};
for t=1:frame
    conflict{t}={};
    j=1;
    while j<=n(t)    %j遍历
        if Ellipse{t}{j}.num_hypoth>1
            num_danduan = numel(Ellipse{t}{j}.flag_combine);
            % 这一部分求出j到j+jplus都属于同一前景
            jplus = 1;
            while Ellipse{t}{j+jplus}.ind_region == Ellipse{t}{j}.ind_region
                jplus = jplus + 1;
            end
            jplus = jplus - 1;
            %##### j到j+jplus为一个前景 ######
            if t>1 %注意fdj在第一帧中没有
                for ind=j:j+jplus 
                    F5 = [ F5, sum(fidj{t-1}(:,ind))==0 ];   %%存在重叠的细胞不可能由分裂得到
                end
            end
            %################################
            % conflict表示所有可能的矛盾集合
            for uu=j:j+jplus-1
                %########这部分找出了一个矛盾假说集合
                conflict{t}{j, uu-j+1} = uu;
                for vv=uu+1:j+jplus
                    if ~isequal( Ellipse{t}{uu}.flag_combine & Ellipse{t}{vv}.flag_combine, zeros(1,num_danduan))   %%相与不为0则将其加入矛盾集
                        conflict{t}{j, uu-j+1} = [conflict{t}{j, uu-j+1}, vv];
                    end
                end
                %##########################此处计算出入口约束###############
                conflict_set = conflict{t}{j, uu-j+1}; %矛盾集合的临时变量
                if t==1 %第一帧考虑出口
                    constrain_sum1 = 0;
                    %###一个矛盾集内出口至多为1个
                    for jj=1:numel(conflict_set)
                        constrain_sum1 = constrain_sum1 + sum(fij{t}(conflict_set(jj),:)) + fit{t}(conflict_set(jj)) + sum(fidj{t}(conflict_set(jj),:))/2;
                    end
                    F6 = [ F6, constrain_sum1 <= 1 ]; %%第一帧的出口矛盾约束
                    %###
                else %% 2―n帧考虑入口
                    constrain_sum2 = 0;
                    %###一个矛盾集内入口至多为1个
                    for jj=1:numel(conflict_set)
                        constrain_sum2 = constrain_sum2 + sum(fij{t-1}(:,conflict_set(jj))) + fsj{t}(conflict_set(jj)) + sum(fidj{t-1}(:,conflict_set(jj)));
                    end    
                    F7 = [ F7, constrain_sum2 <= 1 ]; %%2―n帧的入口矛盾约束
                    %###
                end
                %##########################################################
            end
            j = j+jplus+1;
        else %## 指前景中只含有一个椭圆
            j = j+1;
        end
    end  %## end while
end

toc;
disp('   开始求解ILP……');

%% 最终求解
options = sdpsettings('verbose',0,'solver','cplex');       %%公差1e-3
F=[ F1, F2, F3, F4, F5, F6, F7, Fmod ];
clear F1 F2 F3 F4 F5 F6 F7 Fmod;
sol = solvesdp(F, -object_function, options)

if sol.problem == 0
    for t=1:frame-1
        Fij{t} = value(fij{t});
        Fidj{t} = value(fidj{t});
        Fit{t} = value(fit{t});
    end
    for j=2:frame
        Fsj{j} = value(fsj{j});
    end
    COST = value(object_function);
else
    sol.info
    yalmiperror(sol.problem)
end

save('C:\Users\Administrator\Desktop\tmp_track\fidj\Track_Data.mat','Fij','Fidj','Fit','Fsj','Pij');
save('C:\Users\Administrator\Desktop\tmp_track\fidj\Ellipse.mat','Ellipse');











